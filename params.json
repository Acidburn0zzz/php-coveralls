{"name":"php-coveralls","tagline":"PHP client library for Coveralls API.","body":"php-coveralls\r\n=============\r\n\r\nPHP client library for [Coveralls](https://coveralls.io).\r\n\r\n# API doc\r\n\r\n[API doc](http://satooshi.github.io/php-coveralls/api/) is generated by [ApiGen](http://apigen.org/)\r\n\r\n# Prerequisites\r\n\r\n- PHP 5.3 or later\r\n- On [GitHub](https://github.com/)\r\n- Building on [Travis CI](http://travis-ci.org/), [CircleCI](https://circleci.com/) or [Jenkins](http://jenkins-ci.org/)\r\n- Testing by [PHPUnit](https://github.com/sebastianbergmann/phpunit/) or other testing framework that can generate clover style coverage report\r\n\r\n# Installation\r\n\r\nTo install php-coveralls with Composer, just add the following to your composer.json file:\r\n\r\n```js\r\n// composer.json\r\n{\r\n    \"require-dev\": {\r\n        \"satooshi/php-coveralls\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nThen, you can install the new dependencies by running Composerâ€™s update command from the directory where your `composer.json` file is located:\r\n\r\n```sh\r\n# install\r\n$ php composer.phar install --dev\r\n# update\r\n$ php composer.phar update satooshi/php-coveralls --dev\r\n\r\n# or you can simply execute composer command if you set it to\r\n# your PATH environment variable\r\n$ composer install --dev\r\n$ composer update satooshi/php-coveralls --dev\r\n```\r\n\r\nYou can see this library on [Packagist](https://packagist.org/packages/satooshi/php-coveralls).\r\n\r\nComposer installs autoloader at `./vendor/autoloader.php`. If you use php-coveralls in your php script, add:\r\n\r\n```php\r\nrequire_once 'vendor/autoload.php';\r\n```\r\n\r\nIf you use Symfony2, autoloader has to be detected automatically.\r\n\r\nOr you can use git clone command:\r\n\r\n```sh\r\n# HTTP\r\n$ git clone https://github.com/satooshi/php-coveralls.git\r\n# SSH\r\n$ git clone git@github.com:satooshi/php-coveralls.git\r\n```\r\n\r\n# Configuration\r\n\r\nCurrently support clover style coverage report. php-coveralls collect coverage information from `clover.xml`.\r\n\r\n## PHPUnit\r\n\r\nMake sure that `phpunit.xml.dist` is configured to generate \"coverage-clover\" type log named `clover.xml` like the following configuration:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<phpunit ...>\r\n    <logging>\r\n        ...\r\n        <log type=\"coverage-clover\" target=\"build/logs/clover.xml\"/>\r\n        ...\r\n    </logging>\r\n</phpunit>\r\n```\r\n\r\n### clover.xml\r\n\r\nphp-coveralls collects `count` attribute in a `line` tag from `clover.xml` if its `type` attribute equals to `stmt`. When `type` attribute equals to `method`, php-coveralls excludes its `count` attribute from coverage collection because abstract method in an abstract class is never counted though subclasses implement that method which is executed in test cases.\r\n\r\n```xml\r\n<!-- this one is counted as code coverage -->\r\n<line num=\"37\" type=\"stmt\" count=\"1\"/>\r\n<!-- this one is not counted -->\r\n<line num=\"43\" type=\"method\" name=\"getCommandName\" crap=\"1\" count=\"1\"/>\r\n```\r\n\r\n## Travis CI\r\n\r\nAdd `php vendor/bin/coveralls` to your `.travis.yml` at `after_script`.\r\n\r\n*Please note that `--dev` must be set to `composer install` option.*\r\n\r\n```yml\r\n# .travis.yml\r\nlanguage: php\r\nphp:\r\n    - 5.5\r\n    - 5.4\r\n    - 5.3\r\n\r\nmatrix:\r\n    allow_failures:\r\n        - php: 5.5\r\n\r\nbefore_script:\r\n    - curl -s http://getcomposer.org/installer | php\r\n    - php composer.phar install --dev --no-interaction\r\n\r\nscript:\r\n    - mkdir -p build/logs\r\n    - php vendor/bin/phpunit -c phpunit.xml.dist\r\n\r\nafter_script:\r\n    - php vendor/bin/coveralls\r\n    # or enable logging\r\n    - php vendor/bin/coveralls -v\r\n```\r\n\r\n## CircleCI\r\n\r\nAdd `pecl install xdebug` to your `circle.yml` at `dependencies` section since currently Xdebug extension is not pre-installed. `composer` and `phpunit` are pre-installed but you can install them manually in this dependencies section. The following sample uses default ones.\r\n\r\n```yml\r\nmachine:\r\n  php:\r\n    version: 5.4.10\r\n\r\n## Customize dependencies\r\ndependencies:\r\n  override:\r\n    - mkdir -p build/logs\r\n    - composer install --dev --no-interaction\r\n    - pecl install xdebug\r\n    - cat ~/.phpenv/versions/5.4.10/etc/conf.d/xdebug.ini | sed -e \"s/;//\" > xdebug.ini\r\n    - mv xdebug.ini ~/.phpenv/versions/5.4.10/etc/conf.d/xdebug.ini\r\n\r\n## Customize test commands\r\ntest:\r\n  override:\r\n    - phpunit -c phpunit.xml.dist\r\n```\r\n\r\nAdd `php vendor/bin/coveralls` to the \"Test commands\" textarea on Web UI (Edit settings > Tests > Test commands textarea).\r\n\r\n```sh\r\nCOVERALLS_REPO_TOKEN=your_token php vendor/bin/coveralls\r\n```\r\n\r\n*Please note that `COVERALLS_REPO_TOKEN` should be set in the same line before coveralls command execution. You can not export this variable before coveralls command execution in other command since each command runs in its own shell and does not share environment variables ([see reference on CircleCI](https://circleci.com/docs/environment-variables)).*\r\n\r\n## Codeship\r\n\r\nYou can configure CI process for Coveralls by adding the following commands to the textarea on Web UI (Project settings > Test tab).\r\n\r\nIn the \"Modify your Setup Commands\" section:\r\n\r\n```sh\r\ncurl -s http://getcomposer.org/installer | php\r\nphp composer.phar install --dev --no-interaction\r\nmkdir -p build/logs\r\n```\r\n\r\nIn the \"Modify your Test Commands\" section:\r\n\r\n```sh\r\nphp vendor/bin/phpunit -c phpunit.xml.dist\r\nphp vendor/bin/coveralls\r\n```\r\n\r\nNext, open Project settings > Environment tab, you can set `COVERALLS_REPO_TOKEN` environment variable.\r\n\r\nIn the \"Configure your environment variables\" section:\r\n\r\n```sh\r\nCOVERALLS_REPO_TOKEN=your_token\r\n```\r\n\r\n## From local environment\r\n\r\nIf you would like to call Coveralls API from your local environment, you can set `COVERALLS_RUN_LOCALLY` envrionment variable. This configuration requires `repo_token` to specify which project on Coveralls your project maps to. This can be done by configuring `.coveralls.yml` or `COVERALLS_REPO_TOKEN` environment variable.\r\n\r\n```sh\r\n$ export COVERALLS_RUN_LOCALLY=1\r\n\r\n# either env var\r\n$ export COVERALLS_REPO_TOKEN=your_token\r\n\r\n# or .coveralls.yml configuration\r\n$ vi .coveralls.yml\r\nrepo_token: your_token # should be kept secret!\r\n```\r\n\r\nphp-coveralls set the following properties to `json_file` which is sent to Coveralls API (same behaviour as the Ruby library will do except for the service name).\r\n\r\n- service_name: php-coveralls\r\n- service_event_type: manual\r\n\r\n## .coveralls.yml\r\n\r\nphp-coveralls can use optional `.coveralls.yml` file to configure options. This configuration file is usually at the root level of your repository, but you can specify other path by `--config (or -c)` CLI option. Following options are the same as Ruby library ([see reference on coveralls.io](https://coveralls.io/docs/ruby)).\r\n\r\n- `repo_token`: Used to specify which project on Coveralls your project maps to. This is only needed for repos not using CI and should be kept secret\r\n- `service_name`: Allows you to specify where Coveralls should look to find additional information about your builds. This can be any string, but using `travis-ci` or `travis-pro` will allow Coveralls to fetch branch data, comment on pull requests, and more.\r\n\r\nFollowing options can be used for php-coveralls.\r\n\r\n- `src_dir`: Used to specify where the root level of your source files directory is. Default is `src`. \r\n- `coverage_clover`: Used to specify the path to `clover.xml`. Default is `build/logs/clover.xml`\r\n- `json_path`: Used to specify where to output `json_file` that will be uploaded to Coveralls API. Default is `build/logs/coveralls-upload.json`.\r\n\r\n```yml\r\n# .coveralls.yml example configuration\r\n\r\n# same as Ruby lib\r\nrepo_token: your_token # should be kept secret!\r\nservice_name: travis-pro # travis-ci or travis-pro\r\n\r\n# for php-coveralls\r\nsrc_dir: src\r\ncoverage_clover: build/logs/clover.xml\r\njson_path: build/logs/coveralls-upload.json\r\n```\r\n\r\n# Plan\r\n\r\n- Refactor test cases\r\n- `environment` in `json_file` (not documented but implemented in ruby lib)\r\n- Support commands\r\n    - `push` to run locally\r\n    - `open` to open \"https://coveralls.io/repos/${token}\"\r\n    - `service` to open \"https://coveralls.io/repos/${token}/service\"\r\n    - `last` to open \"https://coveralls.io/repos/${token}/last_build\"\r\n\r\n# Versions\r\n\r\n## 0.6\r\n\r\n- Support configuration for multiple clover.xml\r\n\r\n## 0.5\r\n\r\n- `--verbose (-v)` CLI option enables logging\r\n- Fix: only existing file lines should be included in coverage data\r\n- Support standardized env vars ([Codeship](https://www.codeship.io) supported these env vars)\r\n    - CI_NAME\r\n    - CI_BUILD_NUMBER\r\n    - CI_BUILD_URL\r\n    - CI_BRANCH\r\n    - CI_PULL_REQUEST\r\n- Refactor console logging (PSR-3 compliant)\r\n- Change composer's minimal stability from dev to stable\r\n\r\n## 0.4\r\n\r\n- Replace REST client implementation by [guzzle/guzzle](https://github.com/guzzle/guzzle)\r\n- Change: `repo_token` is required on CircleCI, Jenkins\r\n\r\n## 0.3\r\n\r\n- Better CLI implementation by using [symfony/Console](https://github.com/symfony/Console) component\r\n- Support `--dry-run`, `--config (-c)` CLI option\r\n\r\n## 0.2\r\n\r\n- Support .coveralls.yml\r\n\r\n## 0.1\r\n\r\n- First release\r\n- Support Travis CI (tested)\r\n- Implement CircleCI, Jenkins, local environment (but not tested on these CI environments)\r\n- Collect coverage information from clover.xml\r\n- Collect git repository information","google":"UA-40398434-1","note":"Don't delete this file! It's used internally to help with page regeneration."}